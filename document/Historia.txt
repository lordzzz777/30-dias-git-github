-----------------------------------------------------------------------------------
***************** Clase 07, día 9 *************************************************
-----------------------------------------------------------------------------------

                Crea un repositorio de Git y haz tu primer commit
                -------------------------------------------------


Texto Utilizado de prueba en la clase de git
--------------------------------------------
Este es el historial de lodzzz 

Lordzzz tiene X edad y nació en España

Hoy hablamos de su historia. 

(nueva linea agregada)

Es de estatura grande
--------------------------------------------

************** Comandos usado en la clase **************

$ git rm <nombreArchivo>                  -> cambia de estado

$ git rm --cached <nombreArchivo>         -> esto lo borra de la memoria ram o cache 
                                             por lo que regresa a su estado incial,
                                             antes del  $ git add <nombreArchivo> 

$ git commit -m "mensage de los cambios"  -> Manda los cambios a tu repositorio 

************************* Notas ************************* 
En el caso, de que este fuera el primer commit, y no has configurado bien tu repositorio,
hay que decirle a git quienes somos nosotro, por lo que hay que con figurar git con nuestro
nombre o seudonimo, e email.

Para configurar git, tines que correr los sigientes comandos:

$ git config                                 -> Si pulsamos enter, te mostrara todas las 
                                                configuraciones que tiene git.

$ git config --list                          -> Esto te muestra tu configuracion por defecto de tu git
                                                esto motrara si le falta algo o no a tu configuración

$ git config --list --show-origin            -> Esto te muestra donde estas las configuraciones guardadas
                                                esto es importante en casos avanzados.

$ git config --global user.name "nombre"     -> Esto cambia la configuración del usuario.

$ git config --global user.email "tu@email"  -> Esto cambia la configuración del email

$ git log <nombreArchivo>                    -> me Muestra la istorial de commit

************************************** Info *******************************************
|| lo que nos aparece despues de  "$ git log Historia.txt",  es algo parecido a esto ||
||                                                                                   ||
|| commit 2e0c61643bab5bc15078dddcaa96c90841818ce8 -> esto es el tag, la indicación  ||
||                                                    de donde esto en este momento  ||
|| (HEAD -> main)                                  -> indica la version y la rama    ||
|| Author: lordzzz777                              -> Muestra el autor del commit    ||
|| <lordzzz8@gmail.com>                            -> Muestra el email               ||
|| Date:   Tue Apr 9 22:56:41 2024 +0200           -> fecha y Hora de creación       ||
********************************************************************************+******        



------------------------------------------------------------------------------------
****************************** Clase 08, día 10 ************************************
------------------------------------------------------------------------------------

         Analizar cambios en los archivos de tu proyecto con Git
         -------------------------------------------------------


Texto Utilizado de prueba en la clase de git
--------------------------------------------
Este es el historial de lodzzz 

Lordzzz tiene X edad y nació en España

Hoy hablamos de su historia. 

--------------------------------------------

----------------------------------------------------------------------------------------------------------------------
| Con el comando $ git show nombreArchivo     -> te muestra los cambios que han existido sobre un archivo            |
----------------------------------------------------------------------------------------------------------------------
| * Cuando se ejecuta este comando te muestra el ultimo commit del archivo :                                         |
|                                                                                                                    |
|     -. através de su referencia "commit c0deb2da1a6ff2b239dbb4bb52dceec7319e04d6"                                  |
|                                                                                                                    |
| * te muestra la version (si es la mas reciente o la mas antigua) y la rama en la que esta:                         |
|                                                                                                                    |
|     -. se ve representado de esta manera "(HEAD -> main)"                                                          |
|                                                                                                                    |
| * Después de mostrar el nombre, email, fecha y hora, te muestra el titulo que se escribió en ese commit            |
|                                                                                                                    |
| * Mediante el "diff --git a/nombreArchivo b/nombreArchivo", coge la version anterior y la version reciente         | 
|                                                                                                                    |
| * lo siguiente que se muestra es un indicador o indice de la data base de git "index df906d9..2d4ae33 100644".     |
|                                                                                                                    |
| * a continuación te muestra cuanta versiones hay del mismo archivo:                                                |
|                                                                                                                    |
|       " --- a/nombreArchivo                                                                                        |
|         +++ b/nombreArchivo                                                                                        |
|       "                                                                                                            |
| * aquí tiene una comparativa de cuantos bites cambiaron entre un versión y otra " @@ -1,56 +1,13 @@ "              |
|                                                                                                                    |
| * Cuando los cambios son muchos, es posible que la con sola te salga ":", esto te indica que hay mas datos pero    |
|   no lo puede mostrar todo dentro de la ventana de termina, por lo que le daremos "Enter", hasta que te muestre    |
|   todo y aparece algo como esto "(END)", pulsaremos la teclas "Shift + fn + z, z", y saldremos de nuevo a la linea |
|   de comandos.                                                                                                     |
----------------------------------------------------------------------------------------------------------------------


    *** Recordemos (algunas indicaciones esta en la terminal de Mac, en Windows y linux son diferentes)***
   
    -. ¿Donde estoy ? -> pwd

    -. ¿Que archivos tengo? -> ls

    Modificamos el archivo agregando una linea mas
    
                  $ git add .
                  $ git commit  --- ¿ que pasa si le doy un commit sin agregar mensaje?
    
          -. Te sale un editor de código basado en líneas de comandos se llama "vin", y viene derivado de "vi"
                   
                   * Para poder escribir dentro de "vi" hay que pulsar  la tecla "fn" + "i"

                   * los textos que al principio tine el símbolo "#", no tendrá efecto.

                   * si, después de escribir algo en la primera linea, damos dos enter 
                     El editor entiende que ese es el mensaje y lo primero que escribimos 
                     Es el titulo.

                   * para salir y guardar los cambios (esto en el terminal de Mac), pulsar la tecla "esc"
                     Y pulsar las combinaciones de teclas "Sift + fn + z, z", esto sales a la linea de terminal 
                     normal y guarda el commit


     -. Para compara un las diferencias entre un cambio y otro cambio, usamos el siguiente comando:
                   
                   * $ git diff colocaremos los indicadores de referencia (lo podemos obtener mirando la historia de los commit con "git log")
                      
                           git diff c0deb2da1a6ff2b239dbb4bb52dceec7319e04d6 9261f3a345e11d3686a2c860b99796bad4c78aee
                           
                   * la posición en el que coló que los la referencia le dice cual es el original de referencia y cual hay que comparar
                     entendiendo que el primero es el principal de referencia
                              


------------------------------------------------------------------------------------
****************************** Clase 09, día 11 ************************************
------------------------------------------------------------------------------------



                             ¿Qué es el staging?
                            --------------------

      
 Tengo una carpeta donde esta los archivos del proyecto, al entrar por consola y escribir "$ git init", 
 se crea un área en memoria ram que se llama "staging", es un área completamente desconectada,
 que funciona en memoria ram, y es donde al principio vas agregando tus cambios, y se crea el repositorio
 Ese repositorio es la carpeta oculta que se conoce como /.git/, y hay va a estar todo los cambios al final 
 de tu proyecto tu agrega esos cambias al área "staging" con el comando "$ git add <nombre de archivo>", 
 puede agregas mas archivos, o puedes removerlo con el comando "$ git rm <nombre archivo>".
 Con el comando '$ git commit -m "__"', del área "staging", lo mandas al repositorio, el repositorio,
 tiene un nombre por defecto su nombre es "main". 

 En resumen  ¿Qué es el staging? , es el estado temporal al que agregando los archivos que vamos cambiando,
 y el repositorio real es el que llegas cuando haces un "commit" 
 
 

------------------------------------------------------------------------------------
****************************** Clase 10, día 12 ************************************
------------------------------------------------------------------------------------

             ¿Qué es branch (rama) y cómo funciona un Merge en Git?
             ------------------------------------------------------


      Rama Mastes o mein  (V1)--------(V2)--------(V3)---------------(Error)-----------(V.Final)
                                       |                                |                 |
      Rama de Pruebas o Developmen    (P1)---------(P2)--------(P3)-------------(P4)---(Merge) 
                                                                        |        |
      BugFixng o hotfix    --------------------------------------------(Bug)--(Merge)

------------------------------------------------------------------------------------
****************************** Clase 11, día 13 ************************************
------------------------------------------------------------------------------------

       Volver en el tiempo en nuestro repositorio utilizando reset y checkout
       ----------------------------------------------------------------------


 1 -. verificar que a ocurrido hasta ahora con un...

         $ git log

 2 -. Del listado resultante copiaremos el numero de referencia que 
      que aparece en nuestra lista de versiones, y con el comando :
     
         $ git reset <numero de referencia commit> 

      Regresaremos al estado en el que estaba nuestro proyecto cuado 
      realizamos ese commit.

      Tememos dos tipos :

         $ git reset <numero referencia commit> --hard 

      esto regresaría completamente al estado en el que estaba, y
      perdería todos los cambios nuevos que tuviéramos en versiones
      superiores, (hay que tener cuidado con esta tipo)
 
          $ git reset <numero de referencia commit> --soft 

      Este también se vuelve a una versión anterior, pero lo que este 
      en stelling, sigue en stelling.

 3 -. Par ver nuestro archivo, versiones anteriores  usaremos el comando

          $ git checkout <numero referencia commit> y nombre archivo     
    
      Volvemos al archivo solicitado, y si realizamos un git status, veríamos 
      que hay algo (un archivo modificado), y que si realizo un commit, eliminare 
      todos lo nuevo que agregar, pero que si traigo en lugar de esto:

          $ git checkou  <numero referencia commit> y nombre archivo 

      traigo esto : $ git checkou main <nombre del archivi> se actualiza a la version mein
      que es la ultima version que yo había realizado cambios



------------------------------------------------------------------------------------
****************************** Clase 12, día 14 ************************************
------------------------------------------------------------------------------------

                Flujo de trabajo básico con un repositorio remoto,
                --------------------------------------------------

               ********************** Repaso **********************


------------------------------------------------------------------------------------
****************************** Clase 13, día 15 ************************************
------------------------------------------------------------------------------------

                   
                   Introducción a las ramas o branches de Git
                   ------------------------------------------

              ********************** Repaso **********************


      Rama Mastes o mein  (V1)--------(V2)--------(V3)---------------(Error)-----------(V.Final)
                                       |                                |                 |
      Rama de Pruebas o Developmen    (P1)---------(P2)--------(P3)-------------(P4)---(Merge) 
                                                                        |        |
      BugFixng o hotfix    --------------------------------------------(Bug)--(Merge)




------------------------------------------------------------------------------------
****************************** Clase 14, día 16 ************************************
------------------------------------------------------------------------------------


                          Fusión de ramas con Git merge
                          -----------------------------


Hemos creado dos ramas la rama main y la rama cabecera

En la rama cabecera creo un nuevo commit a donde en mi documento le aremos modificaciones

Nos iremos a la rama master, agregaremos mas texto y cambiar el estilo del fuente de letra
Al fina veremos que pasa cuando los dos archivos son distintos, y tendremos que fusionarlos
En una version final


Nota:
Cuando se hace un merge, no es que se cree una tercera rama, cuando se hace un merge lo que ocurre
Es que la rama cabecera desaparece y se une ala ruta final en la rama mein.

Verificamos el estado con un $ git status, para ve que estamos en la rama correcta 
Realizaremos los cambios a nuestro archivo en dicha rama llamada cabecera

Tras hacer los correspondientes cambios, aremos lo siguiente git commit -am "Mensaje descriptivo"

Si hacemos un $ git checkout main, todos los avances en un principio se pierde, no...,
solo hemos cambiado de la rama cabecera con unos cambios a la rama master que no existe esos cambios

Sigamos avanzado agregando cosas a nuestra rama main y al terminar de agregar realizo un
$ git commit -am "Mensaje descriptivo"

Tomamos ala rama cabecera con un $ git checkout cabecera, vuelvo a vet todos los cambios y 
cosas que tenían estando en esta rama, y lo que quiero es unir lo que tenia en la rama master
con la rama cabecera.

Para hacer un merge primero es irme a main con un checkout, y desde main hacer merge. (Esto lo que hace es
Crear un comer nuevo dentro de mainn, que me va a traer el ultimo commit de mi rama main y el ultimo commit
De la rama cabecera), y los va a fusionar, desde main "$ git merge cabecera 'mensaje descriptivo' ", si
no sabes en que rama esta existe un comando que se llama  $ git breanch, el cual te muestra 





------------------------------------------------------------------------------------
****************************** Clase 15, día 17 ************************************
------------------------------------------------------------------------------------


                   Resolución de conflictos al hacer un merge.
                   ------------------------------------------

Simula un conflicto, cambiemos los mismos archivos en una rama y la otra ... cuando yo 
realice un merge, git va a detectar un error, por ejemplo: 

Vamos a main con un $ git checkout main, y después ya que estamos en la rama main 
vamos a fusionar los cambios de la rama de cabecera, dando como resultado un conflicto

En tu código aparecerá algo como esto 
 
        <<<<<<<<<< HEAD (Current Change)

         -------------- Indica en la rama donde estaba cuando hice el merge ------------- 

        ======== 

        -------------- Indica que de hay viene el merge ------------- 

        >>>>>>>>>> Nombre de rama (Incoming Change) 

Tiene que arreglar los conflicto eligiendo los cambios que mas me conviene según el 
trabajo que este realizando dentro de mi proyecto

Al corregir el conflicto, realizaría un git status, para verificar que el merge esta
todavía esta incompleto, introduciremos el siguiente código $ git commit -am "conflicto solucionado"
Y guardamos 


------------------------------------------------------------------------------------
****************************** Clase 16, día 18 ************************************
------------------------------------------------------------------------------------


                 Cómo funcionan las llaves públicas y privadas
                 ---------------------------------------------
Llave publica y llave privada, ser crean con un proceso algorítmico, las llaves esta vinculada matemáticamente 
una con la otra, esto quiere decir que lo que yo cifre con mi llave publica solo lo abre con mi llave privada


------------------------------------------------------------------------------------
****************************** Clase 17, día 19 (1º parte) *************************
------------------------------------------------------------------------------------

                            Configura tus llaves SSH en local
                            ---------------------------------


En el entorno local crearemos una llave privada y una llave publica, una vez esta creadas enviamos esa publica a GitHub
al repositorio, y le decimos a GitHub para este repositorio vas a usar esta llave publica de la llave privada que esta 
en el local, y eso se conecta a través de un nuevo protocolo "SSH", GitHub asumes te mandara cífrala con tu llave publica
su propia llave publica  

------------------------------------------------------------------------------------
****************************** Clase 17, día 19 (2º parte) *************************
------------------------------------------------------------------------------------

En tu entorno local vas a crear una llave privada y una llave publica, una vez las creas 
Una vez las creas, las vas a embijar a Github, a nuestro repositorio, y le diremos a GitHub,
Para este repositorio quiero que uses esta llave publica, de mi llave privada, y esto se 
conecta por un protocolo nuevo que se llama "SSH", en tu primera connexion con GitHub, 
Te enviara cifrada con tu llave publica te manda su propia llave publica, tendremos una via de doble camino por por el protocolo SSH, y ya no será necesario que te tengas que loquear 

Por ejemplo:
Tengo en mi repositorio en GitHub un proyecto 

Primero es recordar donde estamos 
Con $ pwd  (te muestra la ruta)
Si colocamos $ ls -al (te muestra todos los archivos y carpetas del directorio)
Iremos a la carpeta de nuestro proyecto con cd <nombre de carpeta>
Escribiremos $ ls, veremos los archivos de nuestro proyecto y me mostrara la vais de main


****************************** Nota *******************************
Las llaves SSH no son por repositorio o proyecto, si no por persona 
-------------------------------------------------------------------

Para recordar como esta configurado nuestro gut local:

$ git config -l

Al darle enter, me va ha mostrar , mi user.name 
Y mi user.email

Para cambiar el email:

$ git config --global user.email "mi@email"

Para configurar, repetiremos el comando

$ git config -l

Lo que sigue es crear la llave SSH 

$ ssh-keygen -t rsa -b 4096 -C "mi@email.com"

Pulsamos enter, nos pereira donde queremos guardar la llave, en principio el lugar 
por defecto, por lo que solo es dar enter
Luego te pedirás un passphrase que es una contraseña con espacios, básicamente es la 
contraseña a adicional de texto que le vamos a poner a nuestra llave publica y privada,
nosotros decidimos si colocarle un passphrase o no
Por lo general es recomendable que si

En Win y linux, para saver que las llaves esta corriendo o no, escribiremos 
el siguiente comando:

$ eval  $(ssh-agent -s)

Si todo esta bien 

Lo que no queda es agregar la llave

$ ssh-add ~/.ssh/id_rsa

En Mac -->

Cd .ssh/

Ls -al

Cat id_rsa.pub (Esto ve el contenido mi llave publica)
cat known_hosts 

Tendremos que hacer la misma historia evaluar si esta corriendo el ssh

Eval "$(ssh-agent -s)"
 
Si el archivo config no lo tienes toca crearlo

ls -a 

Cd .ssh/

ls -al

Vim config

Te abrira eel editor de texto del terminal

Escribiremos lo siguiente 

Host *
       AddKeysToAgent yes
       UseKeyschain yes
       IdentityFile ~/.ssh/id_rsa

Guardo 



ls -al 

cat config

Cd

ssh-add -K ~/.ssh/id_rsa
 
Pulsamos enter

Ya podríamos hacer $ git putsch y $ git pull sin necesidad de contraseñas.


------------------------------------------------------------------------------------
****************************** Clase 18, día 20  ***********************************
------------------------------------------------------------------------------------

                                 Uso de GitHub
                                 -------------

Introducción a la plataforma de GitHub, clonar proyecto y configuración,
de llave publica

------------------------------------------------------------------------------------
****************************** Clase 19, día 21  ***********************************
------------------------------------------------------------------------------------

                                Tu primer push
                                --------------

Para empujar los cambios desde mi repositorio local al remoto, tendremos que hacer lo 
siguiente, copiamos la url de nuestro repositorio remoto en GitHub y en la consola
Verificamos que estamos dentro de nuestro repositorio en nuestra carpeta

$ pwd

Le diremos a git, que vamos agrega un origen remoto de nuestros archivos

$ git remote add origin <url que copiamos de nuestro remoto>

Pulsamos enter your pareciera que no pasa nada, pero si escribimos 

$ git remote y enter, vemos algo que se llama origin 

$ git remote -v enter, 

nos muestra un origin para hacer un fetch "traernos", y nos muestra
Un push que significa empujar 

Tenemos en nuestra carpeta 

$ ls -al (mostrara el contenido de la carpeta)

$ git push origin main, le estamos diciendo a git, que le envié al origen la rama main

Lo que tenemos que hacer es traernos los cambios del remoto 

$ git pull origin main

Esta "fatal: refusing to merge unrelated histories" , por que hay dos historias distintas y se rehusa a fusionar estas dos historia, pero hay una forma de corregir 

$ git pull origin main--allow-unrelated-histories

Esto permite fusionar la rama remota co la rama local
-----------------------------------------------------
**** lo primero antes de hacer un commit es traerme la ultima version del servidor ****

$ git pull

Y ahora vamos a traernos los archivos del origen y lo vamos a fusionar con la rama actual

$ git pull origin main

Realizaremos un git Status para comprobar que no Allas cambios, si lo hubiera ...

$ git diff (para mostrar mas detalles)

Correcto solo queda agrgar los cambios con el commit 

$ git commit -am "comentario descriptivo"

En cuanto agregue el cambio realizamos otro ...

$ git pull origin main

Lo siguiente para mandar los cambios al remoto ...

$ git puch origin main


------------------------------------------------------------------------------------
****************************** Clase 20, día 23  ***********************************
------------------------------------------------------------------------------------


                          Git tag y versiones en Github
                          -----------------------------

Para ver la historia de nuestro proyecto ...

$ git log 

Ves mas o menos lo que paso, si colocamos el siguiente comando

$ git log --all

Esto te mostrara toda la historia completa de los commit que se ha ido realizando
Durante todo el proyecto, y si ejecutamos este comando

$ git log --al  --graph 

Esto te muestra la historia de tus comités con un gráfico de las ramas en su parte izquierda
Podremos colocar mas variantes al comando ...

$ git log --al  --graph --oneline 

Te mostrara el historial con las ramas, pero todo mas comprimido
Como el comando es tan largo, podemos creas lo que son alias, de la siguiente manera

alias <nombre_del alias>= "git log --al  --graph --oneline"


Para crear un tag, tiene que copiar el has de la siguiente manera ...

$ git tag -a v0.1 -m "mensaje descriptivo" 1656158 (has es de ejemplo)

Para ver todos los tag

$ git tag

Para saber a que commit o has esta conectado un tag  ...

$ git show-ref --tags 

Los tag no son cambios, son referencias por lo tanto no lo veras con un git status

Los tag son interesante en el remoto, por lo tatanto lo primero que hay que hacer es 

$ git pull origin main 

$ git push origin main --tags

Y listo, estaría  a la vista en GitHub, pero que pasaría si hubiéramos mandado un tag
que estas equivocado, bueno para borrar un tag ...
Lo primero es ver los tag que existe 

$ git tag

Una vez que veamos el tag que no quieres, escribiremos el siguiente comando

$ git tag -d <nombre del tag a borrar> y pulsamos enteer 
Y ya esta borrado de mi repo local, para que los cambios se realicen también en el remoto 
Como buena practica ...

$ git pull origin main

$ git push origin --tags, 

en el remoto sigue existiendo, para eliminarlo ...

$ git push origin :refs/tags/nombre_tag


------------------------------------------------------------------------------------
****************************** Clase 21, día 23  ***********************************
------------------------------------------------------------------------------------

                           Manejo de ramas en GitHub
                           -------------------------

En GitHub, normalmente veras la rama master, pero que pasa con las ramas de desarrollo

Comencemos con un recordatorio de los comando mas importantes referente a las ramas 

$ git checkout <nombre de la rama>  --> (es lo que te permite cambiar de rama)

$ git branch  --> (me muestra todas las ramas)

$ git show-branch  --> (que nos muestra las ramas que existe y cual ha sido su historia)

$ git show-branch --all  --> (nos muestra algo similar pero con un poco mas de datos)

$ gitk --> (lo que hace es abrirte git de una manera muy visual)

Primero como buena practica, traernos los cambios primero ...

$ git pull origin main

Después nos moveremos a nuestra rama que donde estamos trabajando

$ git checkout <nombre rama>

Y luego realizamos ...

$ git push origin <nombre de la rama>

Para seguir crearemos un par de ramas mas, primero regresaremos nuestra rama main

$ git checkout main

Y crearemos una rama con ...

$ git branch <nombre rama>

$ git branch --> (veremos las ramas)

Para mandar estas ramas al remoto aremos lo siguiente

$ git push origin <nombre de rama>








